package First_release;

import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class User_interface extends JFrame {


    private JPanel MainPanel;
    private JLabel ColorSegmentationSystem;
    private JFileChooser Chooser = new JFileChooser("C:\\Программирование\\Java\\Курсач");
    private JButton импортФайлаButton;
    private JButton выборСлояButton;
    private JButton ширинаButton;
    private JButton выбратьФайлButton;
    private JTree jTree = new JTree(new DefaultMutableTreeNode());

    public User_interface() {

        super("Система цветовой сегментации");
        this.setBounds(300, 300, 600, 500);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.getContentPane().add(MainPanel);

        Container container = this.getContentPane();
        container.setLayout(new GridLayout(1, 2, 2, 2));
        выбратьФайлButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                File selectedFile = Chooser.getSelectedFile();
                Chooser.getSelectedFile();
            }
        });


        импортФайлаButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    List<Layer> layerList = new ArrayList<>();
                    File selectedFile = Chooser.getSelectedFile();
                    Parser parser = new Parser();
                    layerList = parser.parsjson(selectedFile.getAbsolutePath());
                    gettree(jTree, layerList);


                    JOptionPane.showMessageDialog(null, "Импорт завершён", "Import", JOptionPane.PLAIN_MESSAGE);
                } catch (Exception e1) {
                    e1.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Ошибка", "Error", JOptionPane.PLAIN_MESSAGE);
                }
            }
        });

    }

    public void gettree(JTree t, List<Layer> layers) {//дерево
        DefaultTreeModel tr = (DefaultTreeModel) t.getModel();
        DefaultMutableTreeNode root = new DefaultMutableTreeNode();
        DefaultMutableTreeNode sourse = new DefaultMutableTreeNode(layers.get(0));//взяли нулевой слой
        root.add(sourse);
        for (Layer layer : layers) {     //цикл foreach
            DefaultMutableTreeNode y = new DefaultMutableTreeNode(layer.getZ_layer()); //
            sourse.add(y); //добавление элемента след уровня
            List<String> str = new ArrayList<>();

            str.add("Матрица цвета Y: " + layer.getY_color());
            str.add("Матрица цвета X: " + layer.getX_color());

            for (String str1 : str) {
                y.add(new DefaultMutableTreeNode(str1));//еще элементы на уровень глубже
            }
        }
        tr.setRoot(root);
        tr.reload();//показывает заполнение JTree, обновление

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        ColorSegmentationSystem = new JLabel();
        ColorSegmentationSystem.setText("Система цветовой сегментации");
        MainPanel.add(ColorSegmentationSystem, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        выборСлояButton = new JButton();
        выборСлояButton.setText("Выбор слоя");
        MainPanel.add(выборСлояButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ширинаButton = new JButton();
        ширинаButton.setText("Ширина");
        MainPanel.add(ширинаButton, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        Chooser = new JFileChooser();
        Chooser.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(Chooser, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        выбратьФайлButton = new JButton();
        выбратьФайлButton.setText("Выбрать файл");
        Chooser.add(выбратьФайлButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        импортФайлаButton = new JButton();
        импортФайлаButton.setText("Импорт файла");
        MainPanel.add(импортФайлаButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

}

